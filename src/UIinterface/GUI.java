package UIinterface;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.*;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import scripts.IPaddressOperations;
import scripts.PingScan;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.JTextComponent;
import scripts.HtmlTitleFinder;

import scripts.NetworkInterfaces;
import scripts.PortScan;
import scripts.MacAddressOperations;

public class GUI extends javax.swing.JFrame {

    boolean ipOneValid = false;
    boolean ipTwoValid = false;
    SwingWorker workerForScan;
    boolean endRangeAvailable = true;
    boolean scanningInprogress = false;

    String col[] = {
            "IP Address", "MAC Address", "Manufacturer", "Open Ports", "Hostname", "HTML Title", "Response Time (MS)"
    };
    DefaultTableModel tableModel = new DefaultTableModel(col, 0) {
        boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit[columnIndex];
        }
    };

    //table 3 model
    String col3[] = {
            "Name", "First IP Address", "Last IP Address"
    };
    DefaultTableModel tableModel3 = new DefaultTableModel(col3, 0) {
        boolean[] canEdit = new boolean[]{
                false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit[columnIndex];
        }
    };

    //JTextComponents Copy Cut Paste popmenu
    private void addCutCopyPastePopUp(JTextComponent textComponent) {
        ActionMap am = textComponent.getActionMap();
        Action paste = am.get("paste-from-clipboard");
        Action copy = am.get("copy-to-clipboard");
        Action cut = am.get("cut-to-clipboard");

        cut.putValue(Action.NAME, "Cut");
        copy.putValue(Action.NAME, "Copy");
        paste.putValue(Action.NAME, "Paste");

        JPopupMenu popup = new JPopupMenu("My Popup");
        textComponent.setComponentPopupMenu(popup);
        popup.add(new JMenuItem(cut));
        popup.add(new JMenuItem(copy));
        popup.add(new JMenuItem(paste));
    }

    public GUI() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        about_app_frame = new javax.swing.JFrame();
        statement_label = new javax.swing.JLabel("",statement_label.CENTER);
        app_name_label = new javax.swing.JLabel();
        app_icon = new javax.swing.JLabel();
        abt_app_label = new javax.swing.JLabel();
        public_ip_frame = new javax.swing.JFrame();
        get_public_ip = new javax.swing.JButton();
        use_public_ip = new javax.swing.JButton();
        find_ip_label = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jTextField1 = new javax.swing.JTextField();
        ip_location_frame = new javax.swing.JFrame();
        ip_for_location_field = new javax.swing.JTextField();
        location_label = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        result_location_label = new javax.swing.JLabel();
        get_location_btn = new javax.swing.JButton();
        use_my_ip_btn = new javax.swing.JButton();
        local_IP_frame = new javax.swing.JFrame();
        local_ip_label = new javax.swing.JLabel();
        scroll_local_ip = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        go_btn_local_ip = new javax.swing.JButton();
        cancel_btn_local_ip = new javax.swing.JButton();
        public_ip_locaip_frame = new javax.swing.JButton();
        action_popmenu = new javax.swing.JPopupMenu();
        copy = new javax.swing.JMenuItem();
        bmark_dialog = new javax.swing.JDialog();
        name_label_bmark = new javax.swing.JLabel();
        name_bmark_dialog = new javax.swing.JTextField();
        save_btn_bmark_dialog = new javax.swing.JButton();
        cancel_bk_dialog = new javax.swing.JButton();
        bookmarks_dialog = new javax.swing.JDialog();
        bmark_scrollpane = new javax.swing.JScrollPane();
        bmark_table = new javax.swing.JTable();
        go_bmark_btn = new javax.swing.JButton();
        cancel_btn_bmark = new javax.swing.JButton();
        edt_bmark_dialog = new javax.swing.JDialog();
        bmark_edt_scrollpane = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        edt_bmark_label = new javax.swing.JLabel();
        bmarkEdt_del_btn = new javax.swing.JButton();
        bmark_cancel_btn = new javax.swing.JButton();
        bmark_edt_btn = new javax.swing.JButton();
        edtBmark_dialog = new javax.swing.JDialog();
        name_edtBmark_label = new javax.swing.JLabel();
        st_IP_edtBmark_label = new javax.swing.JLabel();
        end_IP_edtBmark_label = new javax.swing.JLabel();
        name_edtBmark_field = new javax.swing.JTextField();
        ipStart_edtBmark_field = new javax.swing.JTextField();
        endIP_edtBmark_field = new javax.swing.JTextField();
        save_edtBmark_btn = new javax.swing.JButton();
        cancel_edtBmark_btn = new javax.swing.JButton();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        hostname_field = new javax.swing.JTextField();
        to_label = new javax.swing.JLabel();
        st_IP_label = new javax.swing.JLabel();
        start_scan_btn = new javax.swing.JButton()
        ;
        hostname_label = new javax.swing.JLabel();
        st_IP_field = new javax.swing.JFormattedTextField();
        stop_scan_btn = new javax.swing.JButton()
        ;
        end_ip_field = new javax.swing.JFormattedTextField();
        switch_single_mode_button = new javax.swing.JToggleButton(){
            @Override
            public void setBorder(Border border) {
            }
        };
        resolve_host_button = new javax.swing.JButton()
        ;
        jScrollPane1 = new javax.swing.JScrollPane();
        scan_result_table = new javax.swing.JTable(tableModel);
        progress_bar = new javax.swing.JProgressBar();
        stat_label = new javax.swing.JLabel();
        devices_label = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        scan_label = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileJmenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        actionsMenu = new javax.swing.JMenu();
        local_IP_Menu_Item = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        find_public_IP_menu_item = new javax.swing.JMenuItem();
        geolocation_Menu_item = new javax.swing.JMenuItem();
        bookmarks_Menu = new javax.swing.JMenu();
        view_bookmarks_menu_item = new javax.swing.JMenuItem();
        edit_bookmarks_menu_item = new javax.swing.JMenuItem();
        add_range_menu_item = new javax.swing.JMenuItem();
        help_menu = new javax.swing.JMenu();
        about_app_menu_item = new javax.swing.JMenuItem();

        about_app_frame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        about_app_frame.setTitle("About The Application");
        about_app_frame.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/assets/icon1.png")));
        about_app_frame.setMinimumSize(new java.awt.Dimension(350, 400));
        about_app_frame.setResizable(false);

        statement_label.setText("<html><b>IPv4 Tools</b> was developed to provide network administrators and information <br>security administrators control on their<br>networks and online servers.</html> ");

        app_name_label.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        app_name_label.setForeground(new java.awt.Color(0, 0, 0));
        app_name_label.setText("IPv4 Tools");

        app_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/j1.gif")));

        abt_app_label.setText("<html>Version 0.1 developed by <a href='mailto:abdulsalamshahlol@gmail.com?Subject=Comments' target='_top'>Abdelsalam A. Shahlol.</a> This application <br>is a <b>freeware</b> and the developer isn't <b>responsible</b> for misuse of the <br>application.<br><br>Libraries used in IPv4 Tools:<br>-<a href=www.Ipfiy.com>Ipfiy</a><br>-<a href=www.Jsoup.com>Jsoup</a><br>-<a href=www.MaxMind.com>GeoIP by MaxMind</a><br>-<a href=www.github.com/martylamb/macnificent>Macnificent by MartyLabs</a><br><br>Made in Libya.</html>");

        javax.swing.GroupLayout about_app_frameLayout = new javax.swing.GroupLayout(about_app_frame.getContentPane());
        about_app_frame.getContentPane().setLayout(about_app_frameLayout);
        about_app_frameLayout.setHorizontalGroup(
                about_app_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, about_app_frameLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(about_app_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(abt_app_label)
                                        .addGroup(about_app_frameLayout.createSequentialGroup()
                                                .addComponent(app_icon, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(about_app_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(statement_label, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                                                        .addGroup(about_app_frameLayout.createSequentialGroup()
                                                                .addGap(32, 32, 32)
                                                                .addComponent(app_name_label)))))
                                .addGap(15, 15, 15))
        );
        about_app_frameLayout.setVerticalGroup(
                about_app_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(about_app_frameLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(about_app_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(app_icon, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(about_app_frameLayout.createSequentialGroup()
                                                .addComponent(app_name_label, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(8, 8, 8)
                                                .addComponent(statement_label, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(11, 11, 11)
                                .addComponent(abt_app_label)
                                .addContainerGap())
        );

        public_ip_frame.setTitle("Public IP Address");
        public_ip_frame.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/assets/icon1.png")));
        public_ip_frame.setResizable(false);

        get_public_ip.setText("Get");
        get_public_ip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_public_ipActionPerformed(evt);
            }
        });

        use_public_ip.setText("Use");
        use_public_ip.setEnabled(false);
        use_public_ip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                use_public_ipActionPerformed(evt);
            }
        });

        find_ip_label.setText("Find your public IP address. Click 'Get' to begin.");

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Public IP address is", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        jTextField1.setEnabled(false);

        jLayeredPane1.setLayer(jTextField1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
                jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
                jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTextField1)
                                .addContainerGap())
        );

        javax.swing.GroupLayout public_ip_frameLayout = new javax.swing.GroupLayout(public_ip_frame.getContentPane());
        public_ip_frame.getContentPane().setLayout(public_ip_frameLayout);
        public_ip_frameLayout.setHorizontalGroup(
                public_ip_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(public_ip_frameLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(find_ip_label)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(public_ip_frameLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(public_ip_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(public_ip_frameLayout.createSequentialGroup()
                                                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(public_ip_frameLayout.createSequentialGroup()
                                                .addComponent(use_public_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(get_public_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(40, 40, 40))))
        );
        public_ip_frameLayout.setVerticalGroup(
                public_ip_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(public_ip_frameLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(find_ip_label)
                                .addGap(18, 18, 18)
                                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(public_ip_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(use_public_ip)
                                        .addComponent(get_public_ip))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ip_location_frame.setTitle("Public IP Geolocation");
        ip_location_frame.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/assets/icon1.png")));
        ip_location_frame.setResizable(false);

        ip_for_location_field.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                ip_for_location_fieldCaretUpdate(evt);
            }
        });

        location_label.setText("<html>Find the <b>geolocation</b> of public IP address.<br>Press 'Find' to begin.</html>");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        result_location_label.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(result_location_label, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(result_location_label, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        get_location_btn.setText("Find");
        get_location_btn.setEnabled(false);
        get_location_btn.setToolTipText("<html>Find the <b>Geolocation</b>.</html>");
        get_location_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_location_btnActionPerformed(evt);
            }
        });

        use_my_ip_btn.setText("Use my IP");
        use_my_ip_btn.setToolTipText("<html>Use my <b>public IP</b>.</html>");
        use_my_ip_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                use_my_ip_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ip_location_frameLayout = new javax.swing.GroupLayout(ip_location_frame.getContentPane());
        ip_location_frame.getContentPane().setLayout(ip_location_frameLayout);
        ip_location_frameLayout.setHorizontalGroup(
                ip_location_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ip_location_frameLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(ip_location_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(ip_location_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(ip_location_frameLayout.createSequentialGroup()
                                                        .addComponent(ip_for_location_field, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(use_my_ip_btn)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(get_location_btn))
                                                .addComponent(location_label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ip_location_frameLayout.setVerticalGroup(
                ip_location_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ip_location_frameLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(location_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(ip_location_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ip_for_location_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(get_location_btn)
                                        .addComponent(use_my_ip_btn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        local_IP_frame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        local_IP_frame.setTitle("Local Address Auto Detect");
        local_IP_frame.setAlwaysOnTop(true);
        local_IP_frame.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/assets/icon1.png")));
        local_IP_frame.setResizable(false);

        local_ip_label.setText("Select the interface to detect network's IP address range.");

        /*
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Adapter", "IP Address", "Subnet Prefix"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        */
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        scroll_local_ip.setViewportView(jTable2);

        go_btn_local_ip.setText("Go !");
        go_btn_local_ip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                go_btn_local_ipActionPerformed(evt);
            }
        });

        cancel_btn_local_ip.setText("Cancel");
        cancel_btn_local_ip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_btn_local_ipActionPerformed(evt);
            }
        });

        public_ip_locaip_frame.setText("Public IP");
        public_ip_locaip_frame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                public_ip_locaip_frameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout local_IP_frameLayout = new javax.swing.GroupLayout(local_IP_frame.getContentPane());
        local_IP_frame.getContentPane().setLayout(local_IP_frameLayout);
        local_IP_frameLayout.setHorizontalGroup(
                local_IP_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(local_IP_frameLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(local_IP_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(local_IP_frameLayout.createSequentialGroup()
                                                .addComponent(local_ip_label)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(local_IP_frameLayout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(go_btn_local_ip)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cancel_btn_local_ip)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(public_ip_locaip_frame)
                                                .addGap(20, 20, 20))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, local_IP_frameLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(scroll_local_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())))
        );
        local_IP_frameLayout.setVerticalGroup(
                local_IP_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(local_IP_frameLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(local_ip_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scroll_local_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(local_IP_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(go_btn_local_ip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cancel_btn_local_ip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(public_ip_locaip_frame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(12, 12, 12))
        );

        copy.setText("Copy Cell");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        action_popmenu.add(copy);

        bmark_dialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        bmark_dialog.setTitle("Save Current Range as");
        bmark_dialog.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/assets/icon1.png")));
        bmark_dialog.setResizable(false);

        name_label_bmark.setText("Enter a name:");

        name_bmark_dialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                name_bmark_dialogActionPerformed(evt);
            }
        });

        save_btn_bmark_dialog.setText("Save");
        save_btn_bmark_dialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_btn_bmark_dialogActionPerformed(evt);
            }
        });

        cancel_bk_dialog.setText("Cancel");
        cancel_bk_dialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_bk_dialogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bmark_dialogLayout = new javax.swing.GroupLayout(bmark_dialog.getContentPane());
        bmark_dialog.getContentPane().setLayout(bmark_dialogLayout);
        bmark_dialogLayout.setHorizontalGroup(
                bmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bmark_dialogLayout.createSequentialGroup()
                                .addGroup(bmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(bmark_dialogLayout.createSequentialGroup()
                                                .addGap(126, 126, 126)
                                                .addComponent(save_btn_bmark_dialog)
                                                .addGap(18, 18, 18)
                                                .addComponent(cancel_bk_dialog))
                                        .addGroup(bmark_dialogLayout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addComponent(name_label_bmark)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(name_bmark_dialog, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)))
                                .addGap(18, 18, 18))
        );
        bmark_dialogLayout.setVerticalGroup(
                bmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bmark_dialogLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(bmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(name_label_bmark, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(name_bmark_dialog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(bmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(save_btn_bmark_dialog)
                                        .addComponent(cancel_bk_dialog))
                                .addContainerGap(9, Short.MAX_VALUE))
        );

        bookmarks_dialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        bookmarks_dialog.setTitle("Bookmarks");
        bookmarks_dialog.setAlwaysOnTop(true);
        bookmarks_dialog.setResizable(false);

        /*
        bmark_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "First IP Address", "Last IP Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        */
        bmark_table.setModel(tableModel3);
        bmark_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bmark_tableMouseClicked(evt);
            }
        });
        bmark_scrollpane.setViewportView(bmark_table);

        go_bmark_btn.setText("Go !");
        go_bmark_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                go_bmark_btnActionPerformed(evt);
            }
        });

        cancel_btn_bmark.setText("Cancel");
        cancel_btn_bmark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_btn_bmarkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bookmarks_dialogLayout = new javax.swing.GroupLayout(bookmarks_dialog.getContentPane());
        bookmarks_dialog.getContentPane().setLayout(bookmarks_dialogLayout);
        bookmarks_dialogLayout.setHorizontalGroup(
                bookmarks_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bookmarks_dialogLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(bookmarks_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(bookmarks_dialogLayout.createSequentialGroup()
                                                .addComponent(go_bmark_btn)
                                                .addGap(18, 18, 18)
                                                .addComponent(cancel_btn_bmark)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(bookmarks_dialogLayout.createSequentialGroup()
                                                .addComponent(bmark_scrollpane, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                                                .addGap(14, 14, 14))))
        );
        bookmarks_dialogLayout.setVerticalGroup(
                bookmarks_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bookmarks_dialogLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(bmark_scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(bookmarks_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(go_bmark_btn)
                                        .addComponent(cancel_btn_bmark))
                                .addContainerGap())
        );

        edt_bmark_dialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        edt_bmark_dialog.setTitle("Edit Bookmarks");
        edt_bmark_dialog.setResizable(false);

        jTable4.setModel(tableModel3);
        /*
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bookmark", "Starting IP", "Ending IP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        */
        bmark_edt_scrollpane.setViewportView(jTable4);

        edt_bmark_label.setText("Select bookmark to delete edit or delete.");

        bmarkEdt_del_btn.setText("Delete");
        bmarkEdt_del_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmarkEdt_del_btnActionPerformed(evt);
            }
        });

        bmark_cancel_btn.setText("Cancel");
        bmark_cancel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmark_cancel_btnActionPerformed(evt);
            }
        });

        bmark_edt_btn.setText("Edit");
        bmark_edt_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmark_edt_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout edt_bmark_dialogLayout = new javax.swing.GroupLayout(edt_bmark_dialog.getContentPane());
        edt_bmark_dialog.getContentPane().setLayout(edt_bmark_dialogLayout);
        edt_bmark_dialogLayout.setHorizontalGroup(
                edt_bmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(edt_bmark_dialogLayout.createSequentialGroup()
                                .addGroup(edt_bmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(edt_bmark_dialogLayout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addComponent(edt_bmark_label))
                                        .addGroup(edt_bmark_dialogLayout.createSequentialGroup()
                                                .addGap(16, 16, 16)
                                                .addGroup(edt_bmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(edt_bmark_dialogLayout.createSequentialGroup()
                                                                .addComponent(bmark_edt_btn)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(bmarkEdt_del_btn)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(bmark_cancel_btn))
                                                        .addComponent(bmark_edt_scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(19, Short.MAX_VALUE))
        );
        edt_bmark_dialogLayout.setVerticalGroup(
                edt_bmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, edt_bmark_dialogLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(edt_bmark_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addComponent(bmark_edt_scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(edt_bmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(bmarkEdt_del_btn)
                                        .addComponent(bmark_cancel_btn)
                                        .addComponent(bmark_edt_btn))
                                .addGap(22, 22, 22))
        );

        edtBmark_dialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        edtBmark_dialog.setTitle("Edit Bookmark Menu");
        edtBmark_dialog.setResizable(false);

        name_edtBmark_label.setText("Name:");

        st_IP_edtBmark_label.setText("Starting IP:");

        end_IP_edtBmark_label.setText("Ending IP:");

        save_edtBmark_btn.setText("Save");
        save_edtBmark_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_edtBmark_btnActionPerformed(evt);
            }
        });

        cancel_edtBmark_btn.setText("Cancel");
        cancel_edtBmark_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_edtBmark_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout edtBmark_dialogLayout = new javax.swing.GroupLayout(edtBmark_dialog.getContentPane());
        edtBmark_dialog.getContentPane().setLayout(edtBmark_dialogLayout);
        edtBmark_dialogLayout.setHorizontalGroup(
                edtBmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(edtBmark_dialogLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(edtBmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(edtBmark_dialogLayout.createSequentialGroup()
                                                .addGroup(edtBmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(edtBmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(edtBmark_dialogLayout.createSequentialGroup()
                                                                        .addComponent(end_IP_edtBmark_label)
                                                                        .addGap(19, 19, 19))
                                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, edtBmark_dialogLayout.createSequentialGroup()
                                                                        .addComponent(st_IP_edtBmark_label)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                                        .addGroup(edtBmark_dialogLayout.createSequentialGroup()
                                                                .addComponent(name_edtBmark_label)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                                .addGroup(edtBmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(name_edtBmark_field)
                                                        .addComponent(endIP_edtBmark_field, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                                        .addComponent(ipStart_edtBmark_field))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(edtBmark_dialogLayout.createSequentialGroup()
                                                .addComponent(save_edtBmark_btn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                                                .addComponent(cancel_edtBmark_btn)))
                                .addContainerGap())
        );
        edtBmark_dialogLayout.setVerticalGroup(
                edtBmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(edtBmark_dialogLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(edtBmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(name_edtBmark_label)
                                        .addComponent(name_edtBmark_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(edtBmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(st_IP_edtBmark_label)
                                        .addComponent(ipStart_edtBmark_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(edtBmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(end_IP_edtBmark_label)
                                        .addComponent(endIP_edtBmark_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(edtBmark_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(save_edtBmark_btn)
                                        .addComponent(cancel_edtBmark_btn))
                                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IPv4 Tools");
        setBackground(new java.awt.Color(51, 102, 255));
        setForeground(new java.awt.Color(255, 255, 255));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/assets/icon1.png")));

        addCutCopyPastePopUp(hostname_field);
        hostname_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostname_fieldActionPerformed(evt);
            }
        });

        to_label.setText("To");

        st_IP_label.setText("Enter Starting IP");

        start_scan_btn.setEnabled(true);
        start_scan_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/power.png"))); // NOI18N
        start_scan_btn.setToolTipText("<html><b>Start</b> scanning.</html>");
        start_scan_btn.setBorder(null);
        start_scan_btn.setBorderPainted(false);
        start_scan_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_scan_btnActionPerformed(evt);
            }
        });

        hostname_label.setText("Hostname");

        st_IP_field.setHorizontalAlignment(st_IP_field.CENTER);
        addCutCopyPastePopUp(st_IP_field);
        st_IP_field.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                st_IP_fieldCaretUpdate(evt);
            }
        });

        stop_scan_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/signs.png"))); // NOI18N
        stop_scan_btn.setToolTipText("<html><b>Stop</b> scanning.</html>");
        stop_scan_btn.setBorder(null);
        stop_scan_btn.setBorderPainted(false);
        stop_scan_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop_scan_btnActionPerformed(evt);
            }
        });

        end_ip_field.setHorizontalAlignment(end_ip_field.CENTER);
        addCutCopyPastePopUp(end_ip_field);
        end_ip_field.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                end_ip_fieldCaretUpdate(evt);
            }
        });

        switch_single_mode_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/repeat.png"))); // NOI18N
        switch_single_mode_button.setToolTipText("<html><b>Switch</b> range /single IP address.</html>");
        switch_single_mode_button.setBorder(null);
        switch_single_mode_button.setBorderPainted(false);
        switch_single_mode_button.setBorder(null);
        switch_single_mode_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switch_single_mode_buttonActionPerformed(evt);
            }
        });

        resolve_host_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/loupe.png"))); // NOI18N
        resolve_host_button.setBorder(null);
        resolve_host_button.setBorderPainted(false);
        resolve_host_button.setToolTipText("<html>Resolve <b>hostname</b> to IP address.</html>");
        resolve_host_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolve_host_buttonActionPerformed(evt);
            }
        });

        jDesktopPane1.setLayer(hostname_field, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(to_label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(st_IP_label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(start_scan_btn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(hostname_label, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(st_IP_field, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(stop_scan_btn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(end_ip_field, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(switch_single_mode_button, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(resolve_host_button, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
                jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(st_IP_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(st_IP_field, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(to_label, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(end_ip_field, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(switch_single_mode_button, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(hostname_label, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hostname_field, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resolve_host_button, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(start_scan_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stop_scan_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8))
        );
        jDesktopPane1Layout.setVerticalGroup(
                jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(resolve_host_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(stop_scan_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(start_scan_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(hostname_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(hostname_field)
                                        .addComponent(to_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(end_ip_field, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(switch_single_mode_button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(st_IP_field)
                                        .addComponent(st_IP_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 6, Short.MAX_VALUE))
        );

        scan_result_table.setComponentPopupMenu(action_popmenu);
        scan_result_table.setRowSelectionAllowed(true);
        /*
        scan_result_table.setModel(new javax.swing.table.DefaultTableModel(

            new String [] {
                "IP Address", "Open Ports","Hostname" ,"Response Time","HTML title"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        */
        scan_result_table.setColumnSelectionAllowed(true);
        scan_result_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                scan_result_tableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(scan_result_table);
        scan_result_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        progress_bar.setValue(0);
        progress_bar.setMinimum(0);
        progress_bar.setToolTipText("<html><b>Monitor progress.</b></html>");
        progress_bar.setMaximum(333);
        progress_bar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                progress_barStateChanged(evt);
            }
        });

        stat_label.setText("Ready");

        devices_label.setText("Devices");

        scan_label.setText("Scan");

        menuBar.setBorder(null);

        fileJmenu.setText("File");

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit Application");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileJmenu.add(exitMenuItem);

        menuBar.add(fileJmenu);

        actionsMenu.setText("Actions");

        local_IP_Menu_Item.setText("Use Local IP To Scan");
        local_IP_Menu_Item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                local_IP_Menu_ItemActionPerformed(evt);
            }
        });
        actionsMenu.add(local_IP_Menu_Item);
        actionsMenu.add(jSeparator1);

        find_public_IP_menu_item.setText("Find My Public IP");
        find_public_IP_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_public_IP_menu_itemActionPerformed(evt);
            }
        });
        actionsMenu.add(find_public_IP_menu_item);

        geolocation_Menu_item.setText("Look for IP Geolocation ");
        geolocation_Menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geolocation_Menu_itemActionPerformed(evt);
            }
        });
        actionsMenu.add(geolocation_Menu_item);

        menuBar.add(actionsMenu);

        bookmarks_Menu.setText("Bookmarks");
        bookmarks_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookmarks_MenuActionPerformed(evt);
            }
        });

        view_bookmarks_menu_item.setText("View Bookmarks");
        view_bookmarks_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_bookmarks_menu_itemActionPerformed(evt);
            }
        });
        bookmarks_Menu.add(view_bookmarks_menu_item);

        edit_bookmarks_menu_item.setText("Edit Bookmarks");
        edit_bookmarks_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit_bookmarks_menu_itemActionPerformed(evt);
            }
        });
        bookmarks_Menu.add(edit_bookmarks_menu_item);

        add_range_menu_item.setText("Add Current Range");
        add_range_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_range_menu_itemActionPerformed(evt);
            }
        });
        bookmarks_Menu.add(add_range_menu_item);

        menuBar.add(bookmarks_Menu);

        help_menu.setText("Help");

        about_app_menu_item.setText("About The Application");
        about_app_menu_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                about_app_menu_itemActionPerformed(evt);
            }
        });
        help_menu.add(about_app_menu_item);

        menuBar.add(help_menu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jDesktopPane1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(stat_label)
                                                .addGap(31, 31, 31)
                                                .addComponent(devices_label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(scan_label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(progress_bar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(progress_bar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(stat_label)
                                                        .addComponent(devices_label)
                                                        .addComponent(scan_label))))
                                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("IPv4 Tools for scanning IP ranges and more !");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Menu item for Terminate Application
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    //IP box one validator
    private void st_IP_fieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_st_IP_fieldCaretUpdate
        // TODO add your handling code here:
        final String regex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
        final Pattern pattern = Pattern.compile(regex);
        String ip = st_IP_field.getText();
        Matcher m = pattern.matcher(ip);
        st_IP_field.setForeground(Color.red);
        ipOneValid = false;
        if (m.matches()) {
            st_IP_field.setForeground(Color.black);
            ipOneValid = true;
        }
    }//GEN-LAST:event_st_IP_fieldCaretUpdate

    //IP box two validator
    private void end_ip_fieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_end_ip_fieldCaretUpdate
        // TODO add your handling code here:
        final String regex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
        final Pattern pattern = Pattern.compile(regex);
        String ip = end_ip_field.getText();
        Matcher m = pattern.matcher(ip);
        end_ip_field.setForeground(Color.red);
        ipTwoValid = false;
        if (m.matches()) {
            end_ip_field.setForeground(Color.black);
            ipTwoValid = true;
        }
    }//GEN-LAST:event_end_ip_fieldCaretUpdate

    //About The Application
    private void about_app_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_about_app_menu_itemActionPerformed
        about_app_frame.pack();
        about_app_frame.setLocationRelativeTo(null);
        about_app_frame.setVisible(true);
    }//GEN-LAST:event_about_app_menu_itemActionPerformed

    //public IP finder attached to the Menu Item
    private void find_public_IP_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_public_IP_menu_itemActionPerformed
        // TODO add your handling code here:
        public_ip_frame.pack();
        public_ip_frame.setLocationRelativeTo(null);
        public_ip_frame.setVisible(true);
    }//GEN-LAST:event_find_public_IP_menu_itemActionPerformed

    //Local IP finder attached to the Menu Item
    private void local_IP_Menu_ItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_local_IP_Menu_ItemActionPerformed
        SwingWorker worker = new SwingWorker<Boolean, Void>() {
            @Override
            protected Boolean doInBackground() throws Exception {
                String[] col2 = {"Adapter", "IP Address", "Subnet Prefix"};
                DefaultTableModel tm = new DefaultTableModel(col2, 0) {
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                jTable2.setModel(tm);
                try {
                    String adapterName = "";
                    String adapterIP = "";
                    String adapterIpPrefix = "";
                    NetworkInterfaces ni = new NetworkInterfaces();
                    Enumeration<NetworkInterface> activeInterfaces = ni.displayInterfaceInformation();
                    for (NetworkInterface netint : Collections.list(activeInterfaces)) {
                        Enumeration<InetAddress> inetAddresses = netint.getInetAddresses();
                        for (InetAddress inetAddress : Collections.list(inetAddresses)) {
                            if (!inetAddress.toString().equals("") && inetAddress.toString().contains(".")) {
                                adapterName = netint.getDisplayName();
                                adapterIP = inetAddress.getHostAddress();
                                adapterIpPrefix = String.valueOf("/" + netint.getInterfaceAddresses().get(0).getNetworkPrefixLength());
                                String[] row = {adapterName, adapterIP, adapterIpPrefix};
                                tm.addRow(row);
                            }
                        }
                    }
                } catch (Exception ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                return true;
            }

            @Override
            public void done() {
                local_IP_frame.pack();
                local_IP_frame.setLocationRelativeTo(null);
                local_IP_frame.setVisible(true);
            }
        };
        worker.execute();
    }//GEN-LAST:event_local_IP_Menu_ItemActionPerformed

    //Jframe2 Public IP dialog GET button
    private void get_public_ipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_public_ipActionPerformed
        // TODO add your handling code here:
        int reply = JOptionPane.showConfirmDialog(null, "<html><wbr>The application will connect to IpiFy "
                + "server in order to get the public IP address</wbr></html>", "Notice", YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            SwingWorker worker = new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    jTextField1.setText("Loading....");
                    IPaddressOperations ipClass = new IPaddressOperations();
                    String publicIp = ipClass.publicIP();
                    return publicIp;
                }

                @Override
                protected void done() {
                    try {
                        String result = get();
                        jTextField1.setText(result);
                        use_public_ip.setEnabled(true);
                        jTextField1.setEnabled(true);
                    } catch (InterruptedException | ExecutionException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            worker.execute();
        }
    }//GEN-LAST:event_get_public_ipActionPerformed
    //Public IP use for scanning
    private void use_public_ipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_use_public_ipActionPerformed
        // TODO add your handling code here:
        IPaddressOperations ipClass = new IPaddressOperations();
        st_IP_field.setText(ipClass.ipRangeStart(jTextField1.getText()));
        end_ip_field.setText(ipClass.ipRangeEnd(jTextField1.getText()));
        public_ip_frame.dispose();
    }//GEN-LAST:event_use_public_ipActionPerformed

    //geolocation menu item that will open JFRAME for that
    private void geolocation_Menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geolocation_Menu_itemActionPerformed
        // TODO add your handling code here:
        ip_location_frame.pack();
        ip_location_frame.setLocationRelativeTo(null);
        ip_location_frame.setVisible(true);
    }//GEN-LAST:event_geolocation_Menu_itemActionPerformed

    //Validation of IP address used to find geolocation
    private void ip_for_location_fieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ip_for_location_fieldCaretUpdate
        // TODO add your handling code here:
        final String regex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
        final Pattern pattern = Pattern.compile(regex);
        String ip = ip_for_location_field.getText();
        get_location_btn.setEnabled(false);
        Matcher m = pattern.matcher(ip);
        ip_for_location_field.setForeground(Color.red);
        if (m.matches()) {
            ip_for_location_field.setForeground(Color.black);
            get_location_btn.setEnabled(true);
        }
    }//GEN-LAST:event_ip_for_location_fieldCaretUpdate

    //Use my IP to find the GEOLOCATION button
    private void use_my_ip_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_use_my_ip_btnActionPerformed
        // TODO add your handling code here:
        int reply = JOptionPane.showConfirmDialog(null, "<html><wbr>The application will connect to IpiFy "
                + "server in order to get the public IP address</wbr></html>", "Notice", YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            SwingWorker worker = new SwingWorker<String, Void>() {
                @Override
                protected String doInBackground() throws Exception {
                    IPaddressOperations ipClass = new IPaddressOperations();
                    String publicIp = ipClass.publicIP();
                    if (publicIp.equals("Cannot find public IP please check the internet connection !")) {
                        JOptionPane.showMessageDialog(null, "Can you check the internet connection !", "Error", JOptionPane.ERROR_MESSAGE);
                    }
//                    System.out.println("here in do backg " + publicIp);
                    return publicIp;
                }

                @Override
                protected void done() {
                    try {
//                        System.out.println("here in do backg " + get());
                        String result = get();
                        ip_for_location_field.setText(result);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ExecutionException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            };
            worker.execute();
        }

    }//GEN-LAST:event_use_my_ip_btnActionPerformed

    //Find the GEOLOCATION button!!!
    private void get_location_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_location_btnActionPerformed
        // TODO add your handling code here:
        IPaddressOperations ipClass = new IPaddressOperations();
        String location = ipClass.ipGeoLocation(ip_for_location_field.getText());
        if (location.equals("Cannot find public IP please check the internet connection !")) {
            JOptionPane.showMessageDialog(rootPane, "Check the internet connection !", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            result_location_label.setText(location);
        }
    }//GEN-LAST:event_get_location_btnActionPerformed

    //Start Scanning button
    private void start_scan_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_scan_btnActionPerformed

        endRangeAvailable = end_ip_field.isEditable();
        final String ipEnd;
        final String ipStart;
        final String regex = "(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.)|(^127\\.0\\.0\\.1)";
        final Pattern pattern = Pattern.compile(regex);
//        System.err.println(!st_IP_field.getText().isEmpty());
//        System.err.println(!endRangeAvailable);
//        System.err.println(ipOneValid);
//        System.err.println(ipOneValid);
        if (ipOneValid && ipTwoValid || (!endRangeAvailable && !st_IP_field.getText().isEmpty())) {
            start_scan_btn.setEnabled(false);
            resolve_host_button.setEnabled(false);
            jLabel14.setText("");
            tableModel.setRowCount(0);
            progress_bar.setValue(0);
            if (endRangeAvailable) {
                ipStart = st_IP_field.getText();
                ipEnd = end_ip_field.getText();
            } else {
                ipStart = st_IP_field.getText();
                ipEnd = ipStart;
            }
            stat_label.setText("Scanning");
            workerForScan = new SwingWorker<Integer, Void>() {
                int counter = 0;

                @Override
                protected Integer doInBackground() throws Exception {
                    scanningInprogress = true;

                    String ip = "";
                    String mac = "";
                    String manufacturer = "";
                    String ports = "";
                    String hostname = "";
                    String title = "";
                    String responseTime = "";
                    int activeIP = 0;
                    progress_bar.setValue(3);

                    PingScan p = new PingScan();
                    List<Future<String>> scanResult = p.checkThisIP(ipStart, ipEnd);

                    for (final Future<String> f : scanResult) {
                        try {
                            counter += 0.5;
                            ip = f.get().substring(0, f.get().lastIndexOf(","));
                            if (!ip.isEmpty()) {
                                responseTime = f.get().substring(f.get().lastIndexOf(",") + 1, f.get().length());
                            }
                            if (!ip.isEmpty()) {
                                activeIP += 1;
                                MacAddressOperations ARP = new MacAddressOperations();
                                PortScan openPort = new PortScan();
                                IPaddressOperations ipClass = new IPaddressOperations();
                                HtmlTitleFinder hf = new HtmlTitleFinder();
                                if (isCancelled()) {
                                    p.killThread();
                                    hf.killThread();
                                    progress_bar.setValue(333);
                                    jLabel14.setText(String.valueOf(activeIP - 1));
                                    scanningInprogress = false;
                                    break;
                                }
                                Matcher matcher = pattern.matcher(ip);
                                if (matcher.find()) {
                                    mac = ARP.getMac(ip);
                                    manufacturer = ARP.getOUI(mac);
                                }
                                ports = openPort.checkIpForPorts(ip);
                                hostname = ipClass.hostname(ip);
                                title = hf.getHtmlTitle(ip);
                                progress_bar.setValue(counter);
                                Object[] data = {ip, mac, manufacturer, ports, hostname, title, responseTime};
                                tableModel.addRow(data);
                            }
                        } catch (Exception e) {
                            System.err.println(e.getMessage());
                        }
                    }
                    return activeIP;
                }

                @Override
                protected void done() {
                    try {
                        stat_label.setText("Complete");
                        Integer numberOfIP = 0;
                        if (get() > 0) {
                            numberOfIP = get();
                            progress_bar.setValue(333);
                        }
                        progress_bar.setValue(0);
                        jLabel14.setText(String.valueOf(numberOfIP));
                        stat_label.setText("Ready");
                        resolve_host_button.setEnabled(true);
                        start_scan_btn.setEnabled(true);
                        scanningInprogress = false;
                        JOptionPane.showMessageDialog(null, "<html>Scan is <b>complete with " + numberOfIP + "</b> active IP addresses.</html>", "Alert", JOptionPane.INFORMATION_MESSAGE);
                    } catch (InterruptedException | ExecutionException ex) {
                        System.err.println("Exec at done()");
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            workerForScan.execute();
        } else {
            JOptionPane.showMessageDialog(null, "Enter values before preceeding to scan.", "Alert", HEIGHT);
            st_IP_field.requestFocus();
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) {
                runnable.run();
            }
        }
    }//GEN-LAST:event_start_scan_btnActionPerformed

    //Program STOP button
    private void stop_scan_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop_scan_btnActionPerformed
        if (scanningInprogress) {
            try {
                workerForScan.cancel(true);
            } catch (Exception e) {
                System.err.println("EX " + e.getMessage());
            }
            progress_bar.setValue(333);
            stat_label.setText("Shutting threads");
            JOptionPane.showMessageDialog(null, "<html>Scanning was interrupted.<br><b>Killing Threads..</b></html>", "Stopped !", JOptionPane.WARNING_MESSAGE);
            stat_label.setText("Ready");
            resolve_host_button.setEnabled(true);
            start_scan_btn.setEnabled(true);
        } else {
            st_IP_field.requestFocus();
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) {
                runnable.run();
            }
        }
    }//GEN-LAST:event_stop_scan_btnActionPerformed

    //Resolve the HOSTNAME TO IP ADDRESS
    private void resolve_host_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolve_host_buttonActionPerformed
        if (!hostname_field.getText().isEmpty()) {
            try {
                IPaddressOperations p = new IPaddressOperations();
                String link = hostname_field.getText();
//                System.err.println(link);
                if (!link.isEmpty()) {
                    String Result = p.returnIP(link);
                    st_IP_field.setValue(Result);
                    end_ip_field.setValue(Result);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Cannont resolve Hostname.", "Error", HEIGHT);
            }
        } else {
            hostname_field.requestFocus();
            final Runnable runnable = (Runnable) Toolkit.getDefaultToolkit().getDesktopProperty("win.sound.exclamation");
            if (runnable != null) {
                runnable.run();
            }
        }
    }//GEN-LAST:event_resolve_host_buttonActionPerformed

    // Button in JFrame that is used to find local Addresses. This button open External IP Window
    private void public_ip_locaip_frameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_public_ip_locaip_frameActionPerformed
        // TODO add your handling code here:
        local_IP_frame.dispose();
        public_ip_frame.pack();
        public_ip_frame.setLocationRelativeTo(null);
        public_ip_frame.setVisible(true);
    }//GEN-LAST:event_public_ip_locaip_frameActionPerformed

    //Button that closes local address finder
    private void cancel_btn_local_ipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_btn_local_ipActionPerformed
        // TODO add your handling code here:
        local_IP_frame.dispose();
    }//GEN-LAST:event_cancel_btn_local_ipActionPerformed

    //Button used to confrim and use selected Adapter
    private void go_btn_local_ipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_go_btn_local_ipActionPerformed
        // TODO add your handling code here:
        int row = this.jTable2.getSelectedRow();
        if (row >=0 && row <= jTable2.getRowCount()) {
            String rowSelected = (String) jTable2.getValueAt(row, 1);
            IPaddressOperations ipClass = new IPaddressOperations();
            st_IP_field.setText(ipClass.ipRangeStart(rowSelected));
            end_ip_field.setText(ipClass.ipRangeEnd(rowSelected));
            local_IP_frame.dispose();
        } else {
            local_IP_frame.setVisible(false);
            JOptionPane.showMessageDialog(null, "Please make a selection first.", "Alert", JOptionPane.HEIGHT);
            local_IP_frame.setVisible(true);
        }

    }//GEN-LAST:event_go_btn_local_ipActionPerformed

    //Table row selected and double clicked will be used
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            int row = this.jTable2.getSelectedRow();
            String rowSelected = (String) jTable2.getValueAt(row, 1);
            IPaddressOperations ipClass = new IPaddressOperations();
            st_IP_field.setText(ipClass.ipRangeStart(rowSelected));
            end_ip_field.setText(ipClass.ipRangeEnd(rowSelected));
            local_IP_frame.dispose();
        }
    }//GEN-LAST:event_jTable2MouseClicked

    //Hostname field and this event will resolve the hostname to IP
    private void hostname_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostname_fieldActionPerformed
        // TODO add your handling code here:
        IPaddressOperations ipClass = new IPaddressOperations();
        String ipOfHostname = ipClass.returnIP(hostname_field.getText());
        st_IP_field.setText(ipOfHostname);
        end_ip_field.setText(ipOfHostname);
    }//GEN-LAST:event_hostname_fieldActionPerformed

    //JPOPMenu item to copy to cilpboard
    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        int row = this.scan_result_table.getSelectedRow();
        int col = this.scan_result_table.getSelectedColumn();
        String rowSelected = (String) scan_result_table.getValueAt(row, col);
        StringSelection selection = new StringSelection(rowSelected);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, selection);
    }//GEN-LAST:event_copyActionPerformed

    //right click button for table
    private void scan_result_tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scan_result_tableMousePressed
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt) || evt.isControlDown()) {
            int r = scan_result_table.rowAtPoint(evt.getPoint());
            int c = scan_result_table.columnAtPoint(evt.getPoint());
            //jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            //jTable1.setCellSelectionEnabled(true);

            if (r <= scan_result_table.getRowCount() && c <= scan_result_table.getColumnCount()) {
                //jTable1.changeSelection(r, c, false, false);
                scan_result_table.requestFocus();
            }
        }
    }//GEN-LAST:event_scan_result_tableMousePressed

    private void progress_barStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_progress_barStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_progress_barStateChanged

    private void name_bmark_dialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_name_bmark_dialogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_name_bmark_dialogActionPerformed

    //close the bookmark dialog (THIS IS THE CANCEL BUTTON)
    private void cancel_bk_dialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_bk_dialogActionPerformed
        // TODO add your handling code here:
        bmark_dialog.dispose();
    }//GEN-LAST:event_cancel_bk_dialogActionPerformed

    //menu item from bookmarks that will open jDialog for range name
    private void add_range_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_range_menu_itemActionPerformed
        // TODO add your handling code here:
        bmark_dialog.pack();
        bmark_dialog.setLocationRelativeTo(null);
        bmark_dialog.setVisible(true);
    }//GEN-LAST:event_add_range_menu_itemActionPerformed

    //Save button on the jDialog for adding new bookmark to file and save
    private void save_btn_bmark_dialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_btn_bmark_dialogActionPerformed
        try {
            File dir = new File("Bookmarks");
            String fileName = "/bookmarks.txt";
            File actualFile = new File(dir, fileName);
            if (!actualFile.exists() || !dir.exists()) {
                dir.mkdir();
                actualFile.createNewFile();
            }
            FileWriter fw = null;
            try {
                String name = name_bmark_dialog.getText();
                String ip1 = st_IP_field.getText();
                String ip2 = end_ip_field.getText();
                StringBuilder sb = new StringBuilder();
                sb.append(name + ",");
                sb.append(ip1 + ",");
                sb.append(ip2);

                fw = new FileWriter(actualFile, true);
                fw.write(sb.toString());
                fw.write("\r\n");
            } catch (IOException ioe) {
                System.err.println("IOException: " + ioe.getMessage());
            } finally {
                fw.close();
            }
        } catch (Exception ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        bmark_dialog.dispose();
    }//GEN-LAST:event_save_btn_bmark_dialogActionPerformed

    //fetch the bookmarks from file saved
    private void view_bookmarks_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_bookmarks_menu_itemActionPerformed
        // TODO add your handling code here:
        try {
            tableModel3.setRowCount(0);
            File dir = new File("Bookmarks");
            String fileName = "/bookmarks.txt";
            File actualFile = new File(dir, fileName);
            if (!actualFile.exists() || !dir.exists()) {
                dir.mkdir();
                actualFile.createNewFile();
            }

            BufferedReader br = new BufferedReader(new FileReader(actualFile));
            String line;
            int i = 0;
            while ((line = br.readLine()) != null) {
                String[] bookmarkData = {};
                bookmarkData = line.split("\\,");
                String bookmarkName = bookmarkData[0];
                String ipStart = bookmarkData[1];
                String ipEnd = bookmarkData[2];
                String[] row = {bookmarkName, ipStart, ipEnd};
                if (bookmarkName != null) {
                    tableModel3.addRow(row);
                }
                i++;
            }
            br.close();
        } catch (Exception e) {
            e.getMessage();
        }
        bookmarks_dialog.pack();
        bookmarks_dialog.setLocationRelativeTo(null);
        bookmarks_dialog.setVisible(true);
    }//GEN-LAST:event_view_bookmarks_menu_itemActionPerformed

    //go button on view bookmarks dialog
    private void go_bmark_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_go_bmark_btnActionPerformed
        int row = this.bmark_table.getSelectedRow();
        if (row <= bmark_table.getRowCount() && row >= 0) {
            String rowSelected = (String) bmark_table.getValueAt(row, 1);
            st_IP_field.setText(rowSelected);
            rowSelected = (String) bmark_table.getValueAt(row, 2);
            end_ip_field.setText(rowSelected);
            bookmarks_dialog.dispose();
        } else {
            bookmarks_dialog.setVisible(false);
            JOptionPane.showMessageDialog(null, "Please make a selection first.", "Alert", JOptionPane.HEIGHT);
            bookmarks_dialog.setVisible(true);
        }
    }//GEN-LAST:event_go_bmark_btnActionPerformed

    //use row ip start and ip end in field by double click on row of Bookmarks
    private void bmark_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bmark_tableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            int row = this.bmark_table.getSelectedRow();
            String rowSelected = (String) bmark_table.getValueAt(row, 1);
            st_IP_field.setText(rowSelected);
            rowSelected = (String) bmark_table.getValueAt(row, 2);
            end_ip_field.setText(rowSelected);
            bookmarks_dialog.dispose();
        }
    }//GEN-LAST:event_bmark_tableMouseClicked

    //cancel in the jdialog of bookmarks
    private void cancel_btn_bmarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_btn_bmarkActionPerformed
        // TODO add your handling code here:
        bookmarks_dialog.dispose();
    }//GEN-LAST:event_cancel_btn_bmarkActionPerformed

    //switch between single to range mode
    private void switch_single_mode_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switch_single_mode_buttonActionPerformed
        boolean conditon = end_ip_field.isEditable();
        end_ip_field.setValue("");
        if (conditon) {
            end_ip_field.setEditable(false);
        } else {
            end_ip_field.setEditable(true);
        }

    }//GEN-LAST:event_switch_single_mode_buttonActionPerformed

    //edit bookmarks menu item button will open BOOKMARK EDIT WINDOW
    private void edit_bookmarks_menu_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit_bookmarks_menu_itemActionPerformed
        // TODO add your handling code here:
        try {
            tableModel3.setRowCount(0);
            File dir = new File("Bookmarks");
            String fileName = "/bookmarks.txt";
            File actualFile = new File(dir, fileName);
            if (!actualFile.exists() || !dir.exists()) {
                dir.mkdir();
                actualFile.createNewFile();
            }

            BufferedReader br = new BufferedReader(new FileReader(actualFile));
            String line;
            while ((line = br.readLine()) != null) {
                String[] bookmarkData = {};
                bookmarkData = line.split("\\,");
                String bookmarkName = bookmarkData[0];
                String ipStart = bookmarkData[1];
                String ipEnd = bookmarkData[2];
                String[] row = {bookmarkName, ipStart, ipEnd};
                if (bookmarkName != null) {
                    tableModel3.addRow(row);
                }
            }
            br.close();
        } catch (Exception e) {
            e.getMessage();
        }
        edt_bmark_dialog.pack();
        edt_bmark_dialog.setLocationRelativeTo(null);
        edt_bmark_dialog.setVisible(true);
    }//GEN-LAST:event_edit_bookmarks_menu_itemActionPerformed

    //action to open bookmarks
    private void bookmarks_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookmarks_MenuActionPerformed
//        try {
//            tableModel3.setRowCount(0);
//            File dir = new File("Bookmarks");
//            String fileName = "/bookmarks.txt";
//            File actualFile = new File(dir, fileName);
//            if (!actualFile.exists() || !dir.exists()) {
//                dir.mkdir();
//                actualFile.createNewFile();
//            }
//
//            BufferedReader br = new BufferedReader(new FileReader(actualFile));
//            String line;
//            int i = 0;
//            while ((line = br.readLine()) != null) {
//                String[] bookmarkData = {};
//                bookmarkData = line.split("\\,");
//                String bookmarkName = bookmarkData[0];
//                String ipStart = bookmarkData[1];
//                String ipEnd = bookmarkData[2];
//                String[] row = {bookmarkName, ipStart, ipEnd};
//                if (bookmarkName != null) {
//                    tableModel3.addRow(row);
//                }
//                i++;
//            }
//            br.close();
//        } catch (Exception e) {
//            e.getMessage();
//        }
//        jDialog2.pack();
//        jDialog2.setLocationRelativeTo(null);
//        jDialog2.setVisible(true);
    }//GEN-LAST:event_bookmarks_MenuActionPerformed

    //delete button in bookmarks window
    private void bmarkEdt_del_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmarkEdt_del_btnActionPerformed
        // TODO add your handling code here:
        try {
            File dir = new File("Bookmarks");
            String fileName = "/bookmarks.txt";
            File actualFile = new File(dir, fileName);
            File tempFile = new File(dir, "myTempFile.txt");
            BufferedReader br = new BufferedReader(new FileReader(actualFile));
            BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile));
            int row = this.jTable4.getSelectedRow();
//            System.err.println(row);

            if (row < jTable4.getRowCount() && row >= 0) {
                String rowSelected = (String) jTable4.getValueAt(row, 0) + "," + jTable4.getValueAt(row, 1) + "," + jTable4.getValueAt(row, 2);

                String line;
                while ((line = br.readLine()) != null) {
                    line = line.trim();
                    if (line.equals(rowSelected)) {
                        continue;
                    }
                    bw.write(line + System.getProperty("line.separator"));
                }
                edt_bmark_dialog.dispose();
            } else {
                edt_bmark_dialog.setVisible(false);
                JOptionPane.showMessageDialog(null, "Please make a selection first.", "Alert", JOptionPane.HEIGHT);
                edt_bmark_dialog.setVisible(true);
            }
            br.close();
            bw.close();
            if (actualFile.delete()) {
                boolean successful = tempFile.renameTo(actualFile);
//                System.out.println(successful);
                JOptionPane.showMessageDialog(null, "Delete successful.", "Alert", JOptionPane.INFORMATION_MESSAGE);

            }
        } catch (Exception e) {
            System.err.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "<html>Error deleting the bookmark selected<br></html>." + e.getMessage(), "Erroe", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_bmarkEdt_del_btnActionPerformed

    //closing the bookmark edit window jDialog3
    private void bmark_cancel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmark_cancel_btnActionPerformed
        // TODO add your handling code here:
        edt_bmark_dialog.dispose();
    }//GEN-LAST:event_bmark_cancel_btnActionPerformed

    //Bookmark edit menu
    private void bmark_edt_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmark_edt_btnActionPerformed
        int row = jTable4.getSelectedRow();
        if (row < jTable4.getRowCount() && row >= 0) {
            String rowName = (String) jTable4.getValueAt(row, 0);
            String startIP = (String) jTable4.getValueAt(row, 1);
            String endIP = (String) jTable4.getValueAt(row, 2);
            name_edtBmark_field.setText(rowName);
            ipStart_edtBmark_field.setText(startIP);
            endIP_edtBmark_field.setText(endIP);
            edtBmark_dialog.pack();
            edtBmark_dialog.setLocationRelativeTo(null);
            edtBmark_dialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Please make selection first !", "Alert", HEIGHT);
        }

    }//GEN-LAST:event_bmark_edt_btnActionPerformed

    //cancel button in Bookmark edit window
    private void cancel_edtBmark_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_edtBmark_btnActionPerformed
        edtBmark_dialog.dispose();
    }//GEN-LAST:event_cancel_edtBmark_btnActionPerformed

    //save button in the Bookmark edit window
    private void save_edtBmark_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_edtBmark_btnActionPerformed
        try {
            File dir = new File("Bookmarks");
            String fileName = "/bookmarks.txt";
            File actualFile = new File(dir, fileName);
            File tempFile = new File(dir, "myTempFile.txt");
            BufferedReader br = new BufferedReader(new FileReader(actualFile));
            BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile));
            String editedValue = name_edtBmark_field.getText() + "," + ipStart_edtBmark_field.getText() + "," + endIP_edtBmark_field.getText();
            String line;
            int row = this.jTable4.getSelectedRow();

            if (row < jTable4.getRowCount() && row >= 0) {
                String rowSelected = (String) jTable4.getValueAt(row, 0) + "," + jTable4.getValueAt(row, 1) + "," + jTable4.getValueAt(row, 2);

                while ((line = br.readLine()) != null) {
                    line = line.trim();
                    if (line.equals(rowSelected)) {
                        continue;
                    }
                    bw.write(line + System.getProperty("line.separator"));
                }
            }
            bw.write(editedValue);
            br.close();
            bw.close();
            if (actualFile.delete()) {
                boolean successful = tempFile.renameTo(actualFile);
//                System.out.println(successful);
            }
            JOptionPane.showMessageDialog(null, "Edit successful.", "Alert", JOptionPane.INFORMATION_MESSAGE);
            edtBmark_dialog.dispose();
            edt_bmark_dialog.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "<html>Error editing while editing bookmarks.<br></html>" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_save_edtBmark_btnActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame about_app_frame;
    private javax.swing.JMenuItem about_app_menu_item;
    private javax.swing.JLabel abt_app_label;
    private javax.swing.JPopupMenu action_popmenu;
    private javax.swing.JMenu actionsMenu;
    private javax.swing.JMenuItem add_range_menu_item;
    private javax.swing.JLabel app_icon;
    private javax.swing.JLabel app_name_label;
    private javax.swing.JButton bmarkEdt_del_btn;
    private javax.swing.JButton bmark_cancel_btn;
    private javax.swing.JDialog bmark_dialog;
    private javax.swing.JButton bmark_edt_btn;
    private javax.swing.JScrollPane bmark_edt_scrollpane;
    private javax.swing.JScrollPane bmark_scrollpane;
    private javax.swing.JTable bmark_table;
    private javax.swing.JMenu bookmarks_Menu;
    private javax.swing.JDialog bookmarks_dialog;
    private javax.swing.JButton cancel_bk_dialog;
    private javax.swing.JButton cancel_btn_bmark;
    private javax.swing.JButton cancel_btn_local_ip;
    private javax.swing.JButton cancel_edtBmark_btn;
    private javax.swing.JMenuItem copy;
    private javax.swing.JLabel devices_label;
    private javax.swing.JMenuItem edit_bookmarks_menu_item;
    private javax.swing.JDialog edtBmark_dialog;
    private javax.swing.JDialog edt_bmark_dialog;
    private javax.swing.JLabel edt_bmark_label;
    private javax.swing.JTextField endIP_edtBmark_field;
    private javax.swing.JLabel end_IP_edtBmark_label;
    public javax.swing.JFormattedTextField end_ip_field;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileJmenu;
    private javax.swing.JLabel find_ip_label;
    private javax.swing.JMenuItem find_public_IP_menu_item;
    private javax.swing.JMenuItem geolocation_Menu_item;
    private javax.swing.JButton get_location_btn;
    private javax.swing.JButton get_public_ip;
    private javax.swing.JButton go_bmark_btn;
    private javax.swing.JButton go_btn_local_ip;
    private javax.swing.JMenu help_menu;
    private javax.swing.JTextField hostname_field;
    private javax.swing.JLabel hostname_label;
    private javax.swing.JTextField ipStart_edtBmark_field;
    private javax.swing.JTextField ip_for_location_field;
    private javax.swing.JFrame ip_location_frame;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuItem local_IP_Menu_Item;
    private javax.swing.JFrame local_IP_frame;
    private javax.swing.JLabel local_ip_label;
    private javax.swing.JLabel location_label;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField name_bmark_dialog;
    private javax.swing.JTextField name_edtBmark_field;
    private javax.swing.JLabel name_edtBmark_label;
    private javax.swing.JLabel name_label_bmark;
    private javax.swing.JProgressBar progress_bar;
    private javax.swing.JFrame public_ip_frame;
    private javax.swing.JButton public_ip_locaip_frame;
    private javax.swing.JButton resolve_host_button;
    private javax.swing.JLabel result_location_label;
    private javax.swing.JButton save_btn_bmark_dialog;
    private javax.swing.JButton save_edtBmark_btn;
    private javax.swing.JLabel scan_label;
    private javax.swing.JTable scan_result_table;
    private javax.swing.JScrollPane scroll_local_ip;
    private javax.swing.JLabel st_IP_edtBmark_label;
    public javax.swing.JFormattedTextField st_IP_field;
    private javax.swing.JLabel st_IP_label;
    private javax.swing.JButton start_scan_btn;
    private javax.swing.JLabel stat_label;
    private javax.swing.JLabel statement_label;
    private javax.swing.JButton stop_scan_btn;
    private javax.swing.JToggleButton switch_single_mode_button;
    private javax.swing.JLabel to_label;
    private javax.swing.JButton use_my_ip_btn;
    private javax.swing.JButton use_public_ip;
    private javax.swing.JMenuItem view_bookmarks_menu_item;
    // End of variables declaration//GEN-END:variables
}
